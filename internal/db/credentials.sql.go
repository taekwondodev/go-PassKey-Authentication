// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credentials.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCredential = `-- name: CreateCredential :exec
INSERT INTO credentials (
    id, user_id, public_key, sign_count, transports, aaguid, attestation_format, backup_eligible, backup_state
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
`

type CreateCredentialParams struct {
	ID                []byte
	UserID            uuid.UUID
	PublicKey         []byte
	SignCount         int64
	Transports        []string
	Aaguid            uuid.UUID
	AttestationFormat pgtype.Text
	BackupEligible    bool
	BackupState       bool
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) error {
	_, err := q.db.Exec(ctx, createCredential,
		arg.ID,
		arg.UserID,
		arg.PublicKey,
		arg.SignCount,
		arg.Transports,
		arg.Aaguid,
		arg.AttestationFormat,
		arg.BackupEligible,
		arg.BackupState,
	)
	return err
}

const getCredentialsByUserID = `-- name: GetCredentialsByUserID :many
SELECT id, user_id, public_key, sign_count, transports, aaguid, attestation_format, backup_eligible, backup_state, created_at, last_used_at FROM credentials WHERE user_id = $1
`

func (q *Queries) GetCredentialsByUserID(ctx context.Context, userID uuid.UUID) ([]Credential, error) {
	rows, err := q.db.Query(ctx, getCredentialsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PublicKey,
			&i.SignCount,
			&i.Transports,
			&i.Aaguid,
			&i.AttestationFormat,
			&i.BackupEligible,
			&i.BackupState,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCredentialSignCount = `-- name: UpdateCredentialSignCount :exec
UPDATE credentials
SET
    sign_count = $2,
    last_used_at = NOW()
WHERE id = $1
`

type UpdateCredentialSignCountParams struct {
	ID        []byte
	SignCount int64
}

func (q *Queries) UpdateCredentialSignCount(ctx context.Context, arg UpdateCredentialSignCountParams) error {
	_, err := q.db.Exec(ctx, updateCredentialSignCount, arg.ID, arg.SignCount)
	return err
}
