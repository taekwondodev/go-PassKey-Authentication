// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWebAuthnSession = `-- name: CreateWebAuthnSession :exec
INSERT INTO webauthn_sessions (id, user_id, data, purpose, expires_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateWebAuthnSessionParams struct {
	ID        uuid.UUID
	UserID    int32
	Data      []byte
	Purpose   string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateWebAuthnSession(ctx context.Context, arg CreateWebAuthnSessionParams) error {
	_, err := q.db.Exec(ctx, createWebAuthnSession,
		arg.ID,
		arg.UserID,
		arg.Data,
		arg.Purpose,
		arg.ExpiresAt,
	)
	return err
}

const deleteWebAuthnSession = `-- name: DeleteWebAuthnSession :exec
DELETE FROM webauthn_sessions WHERE id = $1
`

func (q *Queries) DeleteWebAuthnSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWebAuthnSession, id)
	return err
}

const getWebAuthnSession = `-- name: GetWebAuthnSession :one
SELECT id, user_id, data, purpose, created_at, expires_at FROM webauthn_sessions WHERE id = $1 AND purpose = $2
`

type GetWebAuthnSessionParams struct {
	ID      uuid.UUID
	Purpose string
}

func (q *Queries) GetWebAuthnSession(ctx context.Context, arg GetWebAuthnSessionParams) (WebauthnSession, error) {
	row := q.db.QueryRow(ctx, getWebAuthnSession, arg.ID, arg.Purpose)
	var i WebauthnSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Purpose,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
