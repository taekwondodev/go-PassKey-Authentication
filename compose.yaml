services:
  server:
    image: passkey-auth:latest
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    container_name: passkey-server
    ports:
      - "8080:8080"
    networks:
      - public_network
      - private_network
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - URL_BACKEND=${URL_BACKEND}
      - ORIGIN_FRONTEND=${ORIGIN_FRONTEND}
      - DATABASE_URL=${POSTGRES_URL}
      - REDIS_URL=${REDIS_URL}
      - HASH_SALT=${HASH_SALT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  flyway:
    image: flyway/flyway:latest-alpine
    container_name: flyway_passkey
    networks:
      - private_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      FLYWAY_USER: ${POSTGRES_USER}
      FLYWAY_PASSWORD: ${POSTGRES_PASSWORD}
      FLYWAY_CONNECT_RETRIES: 30
    volumes:
      - ./migrations:/flyway/sql/migrations
    restart: "no"
    command: migrate

  postgres:
    image: postgres:alpine
    container_name: postgres_passkey
    networks:
      - private_network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis_passkey
    networks:
      - private_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  public_network:

  private_network:
    internal: true

volumes:
  postgres-data:
  redis-data:
